using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.IO;
using System.Security.Cryptography;
using System.Text;
using System.Windows;

namespace Hashing
{
    class HashingSupervisor
    {
        ///// <summary>
        ///// This method returns a random generated byte array
        ///// </summary>
        ///// <param name="Type"></param>
        ///// <returns></returns>
        //public byte[] RandomKeyGenerator(string userInputKey)
        //{
        //    MD5CryptoServiceProvider md5 = new MD5CryptoServiceProvider();
        //    RNGCryptoServiceProvider eng = new RNGCryptoServiceProvider();
        //    byte[] input = new byte[32];
        //    eng.GetBytes(input);
        //    return input;
        //    //byte[] bytes = Encoding.UTF8.GetBytes(userInputKey);
        //}


        /// <summary>
        /// Returns the string as a byte array
        /// </summary>
        /// <param name="userInput"></param>
        /// <returns></returns>
        public byte[] GetBytes(string userInput)
        {
            return Encoding.UTF8.GetBytes(userInput);
        }

        /// <summary>
        /// This method returns a string with the key in Base64String
        /// </summary>
        /// <param name="key"></param>
        /// <returns></returns>
        public string GetBytesToPlainText(byte[] key)
        {
            MessageBox.Show($"This is a base64 String: {Convert.ToBase64String(key)}") ;
            return BitConverter.ToString(key).Replace("-", String.Empty);
            //return Convert.ToBase64String(key);
        }

        public string GetByteArrayToHexString(byte[] input)
        {
           return BitConverter.ToString(input);
        }

        /// <summary>
        /// This method returns a Hashed string with the key in MD5
        /// </summary>
        /// <param name="key"></param>
        /// <returns></returns>
        private byte[] MD5Hashed(byte[] key)
        {
            using MD5CryptoServiceProvider md5 = new MD5CryptoServiceProvider();
            return md5.ComputeHash(key);
        }

        /// <summary>
        /// This method returns a ashed string with the key in SHA1
        /// </summary>
        /// <param name="key"></param>
        /// <returns></returns>
        private byte[] SHA1Hashing(byte[] key)
        {
            using SHA1Managed sha1 = new SHA1Managed();
            return sha1.ComputeHash(key);
        }

        /// <summary>
        /// This method returns a Hashed string with the key in SHA256
        /// </summary>
        /// <param name="key"></param>
        /// <returns></returns>
        private byte[] SHA256Hashing(byte[] key)
        {
            using SHA256Managed sha256 = new SHA256Managed();
            return sha256.ComputeHash(key);
            
        }

        public byte[] GenerateHmacMessage(byte[] key, byte[] message)
        {
            using HMACSHA256 hmac = new HMACSHA256(key);
            //using FileStream inStream = new FileStream(message, FileMode.Open);
            // Compute the hash of the input file.
            byte[] hashValue = hmac.ComputeHash(message);
            // Reset inStream to the beginning of the file.
            //inStream.Position = 0;
            //// Write the computed hash value to the output file.
            ////outStream.Write(hashValue, 0, hashValue.Length);
            //// Copy the contents of the sourceFile to the destFile.
            //int bytesRead;
            //// read 1K at a time
            //byte[] buffer = new byte[1024];
            //do
            //{
            //    // Read from the wrapping CryptoStream.
            //    bytesRead = inStream.Read(buffer, 0, 1024);
            //    //outStream.Write(buffer, 0, bytesRead);
            //} while (bytesRead > 0);

            return hashValue;
        }

        /// <summary>
        /// This method returns a Hashed string with the key in SHA512
        /// </summary>
        /// <param name="key"></param>
        /// <returns></returns>
        private byte[] SHA512Hashing(byte[] key)
        {
            using SHA512Managed sha512 = new SHA512Managed();
            return sha512.ComputeHash(key);
        }

        public byte[] GetHashedKey(int algorithm, byte[] key)
        {
            switch (algorithm)
            {
                case 0:
                    return MD5Hashed(key);

                case 1:
                    return SHA1Hashing(key);

                case 2:
                    return SHA256Hashing(key);

                case 3:
                    return SHA512Hashing(key);
            }

            return new byte[] { };
        }
    }
}